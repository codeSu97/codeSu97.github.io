[{"content":"certbot简介 本质上来说，certbot 就是一个 ACME client，这也是 Let’s Encrypt 官网推荐的签发证书的方式，适用于对自己的 domain 具有 shell 访问能力的情况，使用所谓的 ACME 协议来自动化的签发证书，很大程度上简化了证书签发的步骤。\n安装步骤 以Ubuntu为例，安装certbot\n1 2 sudo apt-get update sudo apt-get install certbot python3-certbot-nginx 为nginx生成证书 1 sudo certbot --nginx -d www.yourdomain.com 将www.yourdomain.com替换为您的实际域名。Certbot将自动配置Nginx以使用生成的证书。\n证书将在90天后过期，因此我们需要设置自动续期。Certbot包含一个名为certbot renew的命令，用于检查证书是否需要更新，如果需要，则自动更新它们。\n自动续期 为了设置自动续期，我们将创建一个定时任务（cron job）。\n1 2 3 4 crontab -e # 每月1号执行一次 0 0 1 */1 * /usr/bin/certbot renew --quiet ","date":"2023-12-19T20:15:06+08:00","image":"https://codeSu97.github.io/p/certbot%E5%85%8D%E8%B4%B9%E7%94%B3%E8%AF%B7ssl%E8%AF%81%E4%B9%A6/certbot_hu_273039a4fe2d7a20.png","permalink":"https://codeSu97.github.io/p/certbot%E5%85%8D%E8%B4%B9%E7%94%B3%E8%AF%B7ssl%E8%AF%81%E4%B9%A6/","title":"Certbot免费申请SSL证书"},{"content":"在GitHub或者GitLab提交超过50M的大文件的时候，无法上传 什么是Git LFS Git 是分布式版本控制系统，这意味着在克隆过程中会将仓库的整个历史记录传输到客户端。\n对于包涵大文件（尤其是经常被修改的大文件）的项目，初始克隆需要大量时间，因为客户端会下载每个文件的每个版本。\nGit LFS（Large File Storage）是由 Atlassian, GitHub 以及其他开源贡献者开发的 Git 扩展，它通过延迟地（lazily）下载大文件的相关版本来减少大文件在仓库中的影响，具体来说，大文件是在 checkout 的过程中下载的，而不是 clone 或 fetch 过程中下载的（这意味着你在后台定时 fetch 远端仓库内容到本地时，并不会下载大文件内容，而是在你 checkout 到工作区的时候才会真正去下载大文件的内容）。\n参考文献 Atlassian官方LFS文章 ","date":"2023-01-12T15:41:12+08:00","permalink":"https://codeSu97.github.io/p/gitlfs/","title":"Git Lfs"},{"content":"iptables 是什么 iptables 是运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理网络数据包的处理和转发。iptables只支持处理ipv4数据包，对于ipv6数据包，则需要ip6tables。\niptables命令介绍 1 2 3 4 5 6 7 8 9 10 11 12 13 # iptables --help iptables v1.4.21 Usage: iptables -[ACD] chain rule-specification [options] iptables -I chain [rulenum] rule-specification [options] iptables -R chain rulenum rule-specification [options] iptables -D chain rulenum [options] iptables -[LS] [chain [rulenum]] [options] iptables -[FZ] [chain] [options] iptables -[NX] chain iptables -E old-chain-name new-chain-name iptables -P chain target [options] iptables -h (print this help information) iptables基本命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 --append -A chain 添加一个规则到链的末尾 --check -C chain 检查某一条链是否存在 --delete -D chain 删除匹配的链 --delete -D chain rulenum 删除指定链的某一条规则 --insert -I chain [rulenum] 根据给出的规则序号向所选链中插入一条或更多规则。所以，如果规则序号为1， 规则会被插入链的头部。这也是不指定规则序号时的默认方式。 --replace -R chain rulenum 修改指定链中的某一条规则 --list -L [chain [rulenum]] 列出指定链中的规则 --list-rules -S [chain [rulenum]] 打印出指定链中的规则 --flush -F [chain] 删除指定链中的规则 --zero -Z [chain [rulenum]] 把指定链，或者表中的所有链上的所有计数器清零 --new -N chain 创建一条用户自定义链 --delete-chain -X [chain] 删除一条用户自定义链 --policy -P chain target 该表某条链的策略 --rename-chain -E old-chain new-chain 修改链的名称(只有用户自定义链的名称可以被修改） iptables选项参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 [!] --protocol -p proto 规则或者包检查的协议。指定协议可以是tcp、udp、icmp中的一个或全部，也可以是数值，代表这些协议中的某一个。 当然也可以使用在/etc/protocols中定义的协议名。在协议名前加\u0026#39;!\u0026#39;表示相反的规则。数字0相当于all。Protocol all会匹配所有协议，而且这是缺省的选项。在和check命令结合时，all可以不被使用 [!] --source -s address[/mask][...] 指定源地址，可以是主机名、网络名或IP地址。mask说明可以是网络掩码或清楚的数字。标志--src是这个选项的简写。 [!] --destination -d address[/mask][...] 指定目标地址。标志--dst是这个选项的简写 --jump -j target 执行指定的动作 --goto -g chain 跳转到指定的链 --match -m match 扩展匹配 --numeric -n 以数字的形式显示IP地址和端口 [!] --in-interface -i input name[+] 匹配由指定网络接口进入的数据包 [!] --out-interface -o output name[+] 由指定接口发出的数据包 [!] --fragment -f 这意味着在分片的包中，规则只询问第二及以后的片 --exact -x 扩展数字。显示包和字节计数器的精确值，代替用K、M、G表示的约数。这个选项仅能用于-L选项 --line-numbers 当列表显示规则时，在每个规则前面加上行号，与该规则在链中的位置相对应。 1. 针对 tcp 的扩展 当--protocol tcp被指定，且其他匹配的扩展未被指定时，这些扩展被装载。它提供以下选项：\n1 2 3 4 5 6 7 8 9 10 11 12 13 --source-port [!] [port[:port]] 源端口或端口范围指定，也可以使用服务名或端口号。如果使用端口范围，若首端口号忽略则默认为0，若尾端口号忽略则 默认为65535。这个选项可以简写为--sport --destionation-port [!] [port:[port]] 目标端口或端口范围指定。这个选项可以使用--dport别名来代替 --tcp-flags [!] mask comp 匹配指定的TCP标记。第一个参数是我们要检查的标记，一个用逗号分开的列表，第二个参数是用逗号分开的标记表,是必须 被设置的。标记如下：SYN ACK FIN RST URG PSH ALL NONE。例如我们有如下这条命令： iptables -A FORWARD -p tcp --tcp-flags SYN,ACK,FIN,RST SYN 上面这条命令只匹配那些SYN标志被设置而ACK、FIN和RST标记没有被设置的包 [!] --syn 只匹配那些设置了SYN位而清除了ACK和FIN位的TCP包。这些包用于TCP连接初始化时发出请求。例如，大量的这种包进入一个 接口发生堵塞时会阻止进入的TCP连接，而出去的TCP连接不会受到影响。这等于：--tcp-flags SYN,RST,ACK SYN --tcp-option [!] number 匹配设置了TCP选项的数据包 2. 针对 udp 的扩展 当--protocol udp被指定，且其他匹配的扩展未被指定时，这些扩展被装载。它提供以下选项：\n1 2 --source-port [!] [port:[port]] 源端口或端口范围指定 --destionation-port [!] [port:[port]] 目标端口或端口范围指定 3. 针对 ICMP 的扩展 当--protocol icmp被指定，且其他匹配的扩展未被指定时，这些扩展被装载。它提供以下选项：\n1 --icmp-type [!] typename 这个选项允许指定ICMP类型，可以是一个数值型的ICMP类型，或者是某个由命令iptables -p icmp -h所显示的ICMP类型名 4. 针对 mac 的扩展 1 --mac-source [!] address 匹配物理地址。注意它只对来自以太设备并进入PREROUTING、FORWORD和INPUT链的包有效。 5. 针对 limit 的扩展 1 2 --limit rate 最大平均匹配速率：可赋的值有\u0026#39;/second\u0026#39;, \u0026#39;/minute\u0026#39;, \u0026#39;/hour\u0026#39;, or \u0026#39;/day\u0026#39;这样的单位，默认是3/hour --limit-burst number 待匹配包初始个数的最大值:若前面指定的极限还没达到这个数值,则概数字加1.默认值为5 iptables targets 介绍 iptables的-j选项后面对应的是要执行的target。其中有些target具有一些扩展选项，下面我们会一并介绍：\n1. ACCEPT 表示接收匹配的数据包\n2. DROP 表示丢弃匹配的数据包\n3. REJECT 作为对匹配的包的响应，返回一个错误的包：其他情况下与DROP 相同\n此目标只适用于INPUT、FORWORD和OUTPUT，和调用这些的用户自定义链。\n1 2 3 4 5 6 --reject-with type type可以是icmp-net-unreachable、icmp-host-unreachable、icmp-port-nreachable、icmp-proto-unreachable、 icmp-net-prohibited或者icmp-host-prohibited，该类型会返回相应的ICMP错误信息（默认是port-unreachable） --echo-reply 它只能用于指定ICMP ping包的规则中，生成ping的回应 --tcp-reset 可以用于在INPUT链中,或自INPUT链调用的规则，只匹配TCP协议：将回应一个TCP RST包。 4. REDIRECT 表示重定向匹配的数据包，只适用于nat表的PREROUTING和OUTPUT，和只调用它们的用户自定义链。它修改包的目标IP地址来发送包到机器自身（本地生成的包被安置为地址127.0.0.1）\n1 --to-ports [port-port] 指定使用的目的端口或端口范围：不指定的话，目标端口不会被修改。只能用于指定了-p tcp 或 -p udp的规则。 iptables常用命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 新增规则# 指定 ip 访问指定端口 iptables -I INPUT -s \u0026lt;ip\u0026gt; -p tcp -m tcp --dport \u0026lt;port\u0026gt; -j ACCEPT # 允许所有ip访问指定端口 iptables -I INPUT -p tcp -m tcp --dport \u0026lt;port\u0026gt; -j ACCEPT # 查看所有规则 iptables -n -L # 查看所有规则，带 序号 iptables -n -L --line-number # 删除规则# 删除 INPUT 的 序号为 1 的规则 iptables -D INPUT 1 ","date":"2022-12-28T21:15:49+08:00","permalink":"https://codeSu97.github.io/p/iptables/","title":"Iptables"},{"content":"现状 某些网站打开，因为当前网络等其他原因，无法正常访问页面，只能显示网站的基本文字，而没有图片，样式等\n产生原因 当前网站的样式地址、静态文件地址，无法访问，或者不安全被浏览器拦截\n解决办法 打开无法正常访问的网站 F12，打开审查，切换到 Network tab页，刷新页面，会发现很多地址都是显示红色 选择任意一个红色的无法访问的地址，双击打开，会发现浏览器出现隐私错误提示 高级，仍然访问，(或者直接在当前页面上键盘输入 thisisunsafe) 当前页面会刷新重新访问，并正常访问 这时，继续切换到 该网站 的标签页，刷新，会发现当前页面可以正常访问了 猜测 猜测该类网站无法访问，是因为Chrome不信任这些静态资源地址自签名ssl证书，为了安全起见，直接禁止访问了\n","date":"2022-10-23T15:14:25+08:00","permalink":"https://codeSu97.github.io/p/%E8%AE%BF%E9%97%AE%E7%BD%91%E7%AB%99%E7%BC%BA%E5%B0%91%E6%A0%B7%E5%BC%8F/","title":"访问网站缺少样式"},{"content":" “Yeah It\u0026rsquo;s on. ”\n","date":"2022-10-12T19:31:57+08:00","image":"https://codeSu97.github.io/p/hello-world/hello-world_hu_aa0de37877cc16eb.png","permalink":"https://codeSu97.github.io/p/hello-world/","title":"Hello World"}]